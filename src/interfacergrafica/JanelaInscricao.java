/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfacergrafica;


import entidades.Inscricao;
import entidades.Jogador;
import entidades.Torneio;
import fabricaabstrata.CategoriaAbstrata;
import static interfacergrafica.JanelaPrincipal.cbfv;
import interfaces.PopularCombo;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.NInscricao;
import observer.DadosDoTorneio;
import persistencia.PInscricao;
import util.Validation;

/**
 *
 * @author Kleiton
 */
public class JanelaInscricao extends javax.swing.JInternalFrame implements PopularCombo{
    private JDesktopPane principal;

    /**
     * Creates new form frmTipoAssociadoCadoastr
     */
    public JanelaInscricao() {
        initComponents();
        popularCombo();
    }
    
    public JanelaInscricao(JDesktopPane principal){
        this();
        this.principal = principal;
    }
    
    public JanelaInscricao(JDesktopPane principal, Inscricao inscricao){
        this();
        this.principal = principal;
        preencherCampos(inscricao);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        txtCodigoInscricao = new javax.swing.JTextField();
        btnPesquisarInsc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblJogador = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtJogador = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCodJogador = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTorneio = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        txtCodTorneio = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDescricaoTorn = new javax.swing.JTextField();
        rdSalvar = new javax.swing.JRadioButton();
        rdExcluir = new javax.swing.JRadioButton();
        rdLimparCanc = new javax.swing.JRadioButton();
        btnConfirmar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCodCatJogador = new javax.swing.JTextField();
        txtCpf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtCodCatTorneio = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtDataInicio = new javax.swing.JTextField();
        txtDataTermino = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtTaxa = new javax.swing.JTextField();
        btnNotificar = new javax.swing.JButton();

        jScrollPane3.setViewportView(jEditorPane1);

        setClosable(true);
        setTitle("Inscrição");

        jLabel1.setText("Identificador");

        txtCodigoInscricao.setEditable(false);

        btnPesquisarInsc.setText("Pesquisar Inscrições");
        btnPesquisarInsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarInscActionPerformed(evt);
            }
        });

        jLabel2.setText("Categoria");

        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoriaActionPerformed(evt);
            }
        });

        tblJogador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblJogador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblJogadorMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblJogador);

        jLabel3.setText("Jogador");

        txtJogador.setEditable(false);

        jLabel4.setText("Identificador do Jogador");

        txtCodJogador.setEditable(false);

        tblTorneio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblTorneio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblTorneioMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblTorneio);

        jLabel5.setText("Identificador do Torneio");

        txtCodTorneio.setEditable(false);

        jLabel6.setText("Torneio");

        txtDescricaoTorn.setEditable(false);

        rdSalvar.setText("Salvar");
        rdSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdSalvarActionPerformed(evt);
            }
        });

        rdExcluir.setText("Excluir");
        rdExcluir.setEnabled(false);
        rdExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdExcluirActionPerformed(evt);
            }
        });

        rdLimparCanc.setText("Limpar / Cancelar");
        rdLimparCanc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdLimparCancActionPerformed(evt);
            }
        });

        btnConfirmar.setText("Confirmar ação");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        jLabel7.setText("Código Categoria");

        jLabel8.setText("CPF");

        txtCodCatJogador.setEditable(false);

        txtCpf.setEditable(false);

        jLabel9.setText("Código Categoria");

        txtCodCatTorneio.setEditable(false);

        jLabel10.setText("Data início");

        jLabel11.setText("Data término");

        txtDataInicio.setEditable(false);

        txtDataTermino.setEditable(false);

        jLabel12.setText("Taxa");

        txtTaxa.setEditable(false);

        btnNotificar.setText("Notificar jogadores");
        btnNotificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodigoInscricao, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdSalvar)
                    .addComponent(rdExcluir))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnConfirmar))
                    .addComponent(rdLimparCanc))
                .addGap(121, 121, 121)
                .addComponent(btnPesquisarInsc)
                .addGap(43, 43, 43))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDescricaoTorn, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCodTorneio, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(txtCodCatTorneio, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(txtTaxa, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtDataTermino, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtJogador, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCodJogador, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156)
                        .addComponent(jLabel7)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodCatJogador, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNotificar)
                .addGap(68, 68, 68))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtCodigoInscricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdSalvar)
                            .addComponent(rdLimparCanc))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdExcluir)
                                    .addComponent(btnConfirmar)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnPesquisarInsc)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodJogador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(txtCodCatJogador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(txtJogador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnNotificar)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCodTorneio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtCodCatTorneio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtTaxa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDescricaoTorn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtDataTermino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoriaActionPerformed
        preencherTabela(cmbCategoria.getSelectedIndex()+1);
    }//GEN-LAST:event_cmbCategoriaActionPerformed

    private void rdSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdSalvarActionPerformed
        rdSalvar.setSelected(true);
        rdExcluir.setSelected(false);
        rdLimparCanc.setSelected(false);
    }//GEN-LAST:event_rdSalvarActionPerformed

    private void rdExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdExcluirActionPerformed
        rdSalvar.setSelected(false);
        rdExcluir.setSelected(true);
        rdLimparCanc.setSelected(false);
    }//GEN-LAST:event_rdExcluirActionPerformed

    private void rdLimparCancActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdLimparCancActionPerformed
        rdSalvar.setSelected(false);
        rdExcluir.setSelected(false);
        rdLimparCanc.setSelected(true);
    }//GEN-LAST:event_rdLimparCancActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        try {
            if(rdSalvar.isSelected()){
                Validation.isEmpty(validarCampos());
                int codCat = Integer.parseInt(txtCodCatJogador.getText());
                int codJog = Integer.parseInt(txtCodJogador.getText());
                
                Inscricao inscricao = new Inscricao();
                inscricao.setJogador(new Jogador(codJog, txtJogador.getText(),
                    CategoriaAbstrata.getInstance(codCat), txtCpf.getText()));
                
                int codT = Integer.parseInt(txtCodTorneio.getText());
                int codCatT = Integer.parseInt(txtCodCatTorneio.getText());
                
                DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                
                Date dataI = df.parse(txtDataInicio.getText());
                java.sql.Date dateI = new java.sql.Date(dataI.getTime());
                
                Date dataT = df.parse(txtDataTermino.getText());
                java.sql.Date dateT = new java.sql.Date(dataT.getTime());
                
                inscricao.setTorneio(new Torneio(codT, txtDescricaoTorn.getText(), 
                        CategoriaAbstrata.getInstance(codCatT), 
                        dateI, dateT, Double.parseDouble(txtTaxa.getText())));
                
                if(txtCodigoInscricao.getText() != null && !txtCodigoInscricao.getText().isEmpty()){
                    inscricao.setIdInscricao(Integer.parseInt(txtCodigoInscricao.getText()));
                }
                
                new NInscricao().incluir(inscricao);
                
                JOptionPane.showMessageDialog(rootPane, "Jogador inscrito com sucesso!");
                limparTela();
            } else if (rdExcluir.isSelected()){
                int resposta = JOptionPane.showConfirmDialog(null, 
                    "Confirma a exclusão da inscrição?",
                    "CBFV", JOptionPane.YES_NO_OPTION);
                
                if(resposta == JOptionPane.YES_OPTION){
                    new NInscricao().excluir(Integer.parseInt(txtCodigoInscricao.getText()));
                    JOptionPane.showMessageDialog(null, "Operação efetuada com sucesso!");
                    limparTela();
                }
            } else limparTela();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void tblJogadorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblJogadorMousePressed
        int linha = tblJogador.getSelectedRow();
        
        txtCodJogador.setText(tblJogador.getValueAt(linha,0).toString());
        txtJogador.setText(tblJogador.getValueAt(linha,1).toString());
        txtCodCatJogador.setText(tblJogador.getValueAt(linha,2).toString());
        txtCpf.setText(tblJogador.getValueAt(linha,3).toString());
    }//GEN-LAST:event_tblJogadorMousePressed

    private void tblTorneioMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTorneioMousePressed
        
        int linha = tblTorneio.getSelectedRow();
        txtCodTorneio.setText(tblTorneio.getValueAt(linha, 0).toString());
        txtDescricaoTorn.setText(tblTorneio.getValueAt(linha, 1).toString());
        txtCodCatTorneio.setText(tblTorneio.getValueAt(linha, 2).toString());
        txtDataInicio.setText(tblTorneio.getValueAt(linha, 3).toString());
        txtDataTermino.setText(tblTorneio.getValueAt(linha, 4).toString());
        txtTaxa.setText(tblTorneio.getValueAt(linha, 5).toString());
    }//GEN-LAST:event_tblTorneioMousePressed

    private void btnNotificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotificarActionPerformed
        atualizar();
    }//GEN-LAST:event_btnNotificarActionPerformed

    private void btnPesquisarInscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarInscActionPerformed
        try {
            JanelaPesquisaInscricao janela = new JanelaPesquisaInscricao(principal);
            principal.add(janela);
            janela.setVisible(true);
            this.dispose();
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }//GEN-LAST:event_btnPesquisarInscActionPerformed

    private void limparTela(){
        rdExcluir.setEnabled(false);
        txtCodigoInscricao.setText("");
        cmbCategoria.setSelectedIndex(0);
        cmbCategoria.setEnabled(true);
        rdSalvar.setSelected(false);
        rdExcluir.setSelected(false);
        rdLimparCanc.setSelected(false);
        txtCodJogador.setText("");
        txtJogador.setText("");
        txtCodCatJogador.setText("");
        txtCpf.setText("");
        txtCodTorneio.setText("");
        txtCodCatTorneio.setText("");
        txtDescricaoTorn.setText("");
        txtDataInicio.setText("");
        txtDataTermino.setText("");
        txtTaxa.setText(title);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnNotificar;
    private javax.swing.JButton btnPesquisarInsc;
    private javax.swing.JComboBox<String> cmbCategoria;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton rdExcluir;
    private javax.swing.JRadioButton rdLimparCanc;
    private javax.swing.JRadioButton rdSalvar;
    private javax.swing.JTable tblJogador;
    private javax.swing.JTable tblTorneio;
    private javax.swing.JTextField txtCodCatJogador;
    private javax.swing.JTextField txtCodCatTorneio;
    private javax.swing.JTextField txtCodJogador;
    private javax.swing.JTextField txtCodTorneio;
    private javax.swing.JTextField txtCodigoInscricao;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtDataInicio;
    private javax.swing.JTextField txtDataTermino;
    private javax.swing.JTextField txtDescricaoTorn;
    private javax.swing.JTextField txtJogador;
    private javax.swing.JTextField txtTaxa;
    // End of variables declaration//GEN-END:variables

    @Override
    public void popularCombo() {
        try {
            cmbCategoria.removeAllItems();
            CategoriaAbstrata.getListaDeFabricas().forEach(categoria -> cmbCategoria.addItem(categoria));
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }

    private void preencherTabela(int index){
        try {
            DecimalFormat formato = new DecimalFormat("#.##");
            Vector detalheJog = new Vector<>();
            Vector detalheTor = new Vector<>();
            switch(index){
                case 1:
                    //Tabela do Jogador
                    detalheJog.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaJogadores().forEach(jogador -> {
                        Vector<String> linha = new Vector<>();
                        linha.add(jogador.getId()+"");
                        linha.add(jogador.getNome());
                        linha.add(jogador.getCategoria().getIdCat()+"");
                        linha.add(jogador.getCpf());
                        detalheJog.add(linha);
                    });
                    tblJogador.setModel(new DefaultTableModel(detalheJog, tabelaJogador()));
                    //Tabela do Torneio
                    detalheTor.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaTorneios().forEach(torneio ->{
                        Vector<String> linhaT = new Vector<>();
                        linhaT.add(torneio.getId()+"");
                        linhaT.add(torneio.getDescricao());
                        linhaT.add(torneio.getCategoria().getIdCat()+"");
                        linhaT.add(torneio.getDataInicio()+"");
                        linhaT.add(torneio.getDataTermino()+"");
                        linhaT.add(formato.format(torneio.getTaxa()) +"");
                        detalheTor.add(linhaT);
                    });
                    tblTorneio.setModel(new DefaultTableModel(detalheTor, tabelaTorneio()));
                    break;
                case 2:
                    //Tabela do Jogador
                    detalheJog.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaJogadores().forEach(jogador -> {
                        Vector<String> linha = new Vector<>();
                        linha.add(jogador.getId()+"");
                        linha.add(jogador.getNome());
                        linha.add(jogador.getCategoria().getIdCat()+"");
                        linha.add(jogador.getCpf());
                        detalheJog.add(linha);
                    });
                    tblJogador.setModel(new DefaultTableModel(detalheJog, tabelaJogador()));
                    //Tabela do Torneio
                    detalheTor.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaTorneios().forEach(torneio ->{
                        Vector<String> linhaT = new Vector<>();
                        linhaT.add(torneio.getId()+"");
                        linhaT.add(torneio.getDescricao());
                        linhaT.add(torneio.getCategoria().getIdCat()+"");
                        linhaT.add(torneio.getDataInicio()+"");
                        linhaT.add(torneio.getDataTermino()+"");
                        linhaT.add(formato.format(torneio.getTaxa()) +"");
                        detalheTor.add(linhaT);
                    });
                    tblTorneio.setModel(new DefaultTableModel(detalheTor, tabelaTorneio()));
                    break;
                case 3: 
                    //Tabela do Jogador
                    detalheJog.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaJogadores().forEach(jogador -> {
                        Vector<String> linha = new Vector<>();
                        linha.add(jogador.getId()+"");
                        linha.add(jogador.getNome());
                        linha.add(jogador.getCategoria().getIdCat()+"");
                        linha.add(jogador.getCpf());
                        detalheJog.add(linha);
                    });
                    tblJogador.setModel(new DefaultTableModel(detalheJog, tabelaJogador()));
                    //Tabela do Torneio
                    detalheTor.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaTorneios().forEach(torneio ->{
                        Vector<String> linhaT = new Vector<>();
                        linhaT.add(torneio.getId()+"");
                        linhaT.add(torneio.getDescricao());
                        linhaT.add(torneio.getCategoria().getIdCat()+"");
                        linhaT.add(torneio.getDataInicio()+"");
                        linhaT.add(torneio.getDataTermino()+"");
                        linhaT.add(formato.format(torneio.getTaxa()) +"");
                        detalheTor.add(linhaT);
                    });
                    tblTorneio.setModel(new DefaultTableModel(detalheTor, tabelaTorneio()));
                    break;
                case 4:
                    //Tabela do Jogador
                    detalheJog.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaJogadores().forEach(jogador -> {
                        Vector<String> linha = new Vector<>();
                        linha.add(jogador.getId()+"");
                        linha.add(jogador.getNome());
                        linha.add(jogador.getCategoria().getIdCat()+"");
                        linha.add(jogador.getCpf());
                        detalheJog.add(linha);
                    });
                    tblJogador.setModel(new DefaultTableModel(detalheJog, tabelaJogador()));
                    //Tabela do Torneio
                    detalheTor.removeAllElements();
                    CategoriaAbstrata.getInstance(index).getListaTorneios().forEach(torneio ->{
                        Vector<String> linhaT = new Vector<>();
                        linhaT.add(torneio.getId()+"");
                        linhaT.add(torneio.getDescricao());
                        linhaT.add(torneio.getCategoria().getIdCat()+"");
                        linhaT.add(torneio.getDataInicio()+"");
                        linhaT.add(torneio.getDataTermino()+"");
                        linhaT.add(formato.format(torneio.getTaxa()) +"");
                        detalheTor.add(linhaT);
                    });
                    tblTorneio.setModel(new DefaultTableModel(detalheTor, tabelaTorneio()));
                    break;
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
    
    private void preencherCampos(Inscricao inscricao){
        rdExcluir.setEnabled(true);
        
        txtCodigoInscricao.setText(Integer.toString(inscricao.getIdInscricao()));
        cmbCategoria.setSelectedItem(inscricao.getJogador().getCategoria().getDescricao());
        cmbCategoria.setEnabled(false);
        txtCodJogador.setText(Integer.toString(inscricao.getJogador().getId()));
        txtJogador.setText(inscricao.getJogador().getNome());
        txtCodCatJogador.setText(Integer.toString(inscricao.getJogador().getCategoria().getIdCat()));
        txtCpf.setText(inscricao.getJogador().getCpf());
        
        txtCodTorneio.setText(Integer.toString(inscricao.getTorneio().getId()));
        txtDescricaoTorn.setText(inscricao.getTorneio().getDescricao());
        txtCodTorneio.setText(Integer.toString(inscricao.getTorneio().getCategoria().getIdCat()));
        txtDataInicio.setText(inscricao.getTorneio().getDataInicio().toString());
        txtDataTermino.setText(inscricao.getTorneio().getDataTermino().toString());
        txtTaxa.setText(Double.toString(inscricao.getTorneio().getTaxa()));
    }
    
    private Vector<String> tabelaJogador(){
            Vector<String> cabecalho = new Vector<>();
            cabecalho.add("Código");
            cabecalho.add("Nome");
            cabecalho.add("Categoria");
            cabecalho.add("CPF");
            
            return cabecalho;
    }
    
    private Vector<String> tabelaTorneio(){
        Vector<String> cabecalho = new Vector<>();
        cabecalho.add("Código");
        cabecalho.add("Descrição");
        cabecalho.add("Categoria");
        cabecalho.add("Data Início");
        cabecalho.add("Data Término");
        cabecalho.add("Taxa");

        return cabecalho;
    }
    
    private void atualizar(){
        try {
            java.sql.Date data = java.sql.Date.valueOf(LocalDate.now());
            new PInscricao().listar().forEach(inscricao -> cbfv.setDados(new DadosDoTorneio(inscricao, data)));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private ArrayList<String> validarCampos(){
        ArrayList<String> lista = new ArrayList<>();
        
        lista.add(txtCodJogador.getText());
        lista.add(txtJogador.getText());
        lista.add(txtCodCatJogador.getText());
        lista.add(txtCpf.getText());
        lista.add(txtCodTorneio.getText());
        lista.add(txtDescricaoTorn.getText());
        lista.add(txtCodCatTorneio.getText());
        lista.add(txtDataInicio.getText());
        lista.add(txtDataTermino.getText());
        lista.add(txtTaxa.getText());
        
        return lista;
    }
}
